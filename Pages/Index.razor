@page "/"

@using System.Timers
@using System.Drawing

<div class="container-fluid">
    <div class="row">
        <div>Health: @Health</div>
        &nbsp;|&nbsp;
        <div>Score: @Score</div>
    </div>
</div>
<div tabindex="0" class="container-fluid game-field" @onkeydown=KeyDown @ref="gameFieldDiv">
    @for (int x = 0; x < GAME_FIELD_HEIGHT; x++)
    {
    <div class="row">
        @for (int y = 0; y < GAME_FIELD_WIDTH; y++)
        {
            if (PlayerLocation.X == x && PlayerLocation.Y == y)
            {
                <span class="player"></span>
                continue;
            }

            if(@lightMap[x,y] == 2)
            {
                var coin = CoinLocations.FirstOrDefault(p => p.X == x && p.Y == y);

                if (!coin.IsEmpty)
                {
                    <span class="coin"></span>
                    continue;
                }

                var potion = PotionLocations.FirstOrDefault(p => p.X == x && p.Y == y);

                if (!potion.IsEmpty)
                {
                    <span class="potion"></span>
                    continue;
                }

                @if (@gameMap[x, y] == 1)
                {
                    <span class="wall"></span>
                }
                else if (@gameMap[x, y] == 2)
                {
                    <span class="grass"></span>
                }
                else if (@gameMap[x, y] == 4)
                {
                    <span class="ladder-down"></span>
                }
                else if (@gameMap[x, y] == 5)
                {
                    <span class="spider"></span>
                }
                else if (@gameMap[x, y] == 7)
                {
                    <span class="snake"></span>
                }
                else if (@gameMap[x, y] == 8)
                {
                    <span class="treasure-chest"></span>
                }
            }
            else
            {
                <span class="hidden"></span>
            }
        }
    </div>
    }
</div>

@code
{
    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    private Point PlayerLocation = new Point { X = 2, Y = 2 };
    private int Health = 100;
    private int Score = 0;
    private const int CoinValue = 50;
    private const int PotionValue = 50;
    private Timer timer;
    private int TotalNumberOfCoins = 3;
    private int TotalNumberOfPotions = 2;
    private List<Point> CoinLocations = new List<Point>();
    private List<Point> PotionLocations = new List<Point>();
    private List<Point> EnemyLocations = new List<Point>();
    private const int GAME_FIELD_WIDTH = 24;
    private const int GAME_FIELD_HEIGHT = 20;
    private Random rand = new Random();
    private int[,] gameMap = new int[GAME_FIELD_HEIGHT, GAME_FIELD_WIDTH]
    {
        { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
        { 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1 },
        { 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,1 },
        { 1,2,2,2,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,2,2,2,1 },
        { 1,2,2,2,1,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,1 },
        { 1,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1 },
        { 1,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,1 },
        { 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1 },
        { 1,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,1 },
        { 1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,2,2,2,2,2,2,2,2,1 },
        { 1,2,2,2,2,2,2,2,2,2,1,1,2,2,1,1,2,2,2,2,2,2,2,1 },
        { 1,2,1,1,1,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1 },
        { 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1 },
        { 1,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1 },
        { 1,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,1 },
        { 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,1 },
        { 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1 },
        { 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1 },
        { 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1 },
        { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
    };
    private int[,] lightMap = new int[GAME_FIELD_HEIGHT, GAME_FIELD_WIDTH];

    private ElementReference gameFieldDiv;

    protected override void OnInitialized()
    {
        SpawnCoins();
        SpawnPotions();

        lightMap = FOV();

        timer = new Timer(1000);
        timer.Elapsed += new ElapsedEventHandler(GameLoop);
        timer.Enabled = true;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("SetFocusToElement", gameFieldDiv);
        }
    }

    private Point GetRandomMapPoint()
    {
        var h = rand.Next(0, GAME_FIELD_HEIGHT - 1);
        var w = rand.Next(0, GAME_FIELD_WIDTH - 1);

        var OfflimitsLocations = new List<Point>();

        OfflimitsLocations.Add(PlayerLocation);
        OfflimitsLocations.AddRange(CoinLocations);
        OfflimitsLocations.AddRange(PotionLocations);

        if (gameMap[h, w] == 1 || OfflimitsLocations.FirstOrDefault(p => p.X == h && p.Y == w) != Point.Empty)
        {
            return GetRandomMapPoint();
        }

        return new Point(h, w);
    }

    private void SpawnPotions()
    {
        if (PotionLocations.Count() < TotalNumberOfPotions)
        {
            var numToAdd = TotalNumberOfPotions - PotionLocations.Count();

            for (int i = 0; i < numToAdd; i++)
            {
                PotionLocations.Add(GetRandomMapPoint());
            }
        }
    }

    private void SpawnCoins()
    {
        if (CoinLocations.Count() < TotalNumberOfCoins)
        {
            var numToAdd = TotalNumberOfCoins - CoinLocations.Count();

            for (int i = 0; i < numToAdd; i++)
            {
                CoinLocations.Add(GetRandomMapPoint());
            }
        }
    }

    private async void GameLoop(object source, ElapsedEventArgs e)
    {
        SpawnCoins();
        SpawnPotions();

        if(CoinLocations.Any())
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private void CheckThingsSincePlayerMoved()
    {
        var coin = CoinLocations.FirstOrDefault(p => p.X == PlayerLocation.X && p.Y == PlayerLocation.Y);

        if (!coin.IsEmpty)
        {
            Score += CoinValue;
            CoinLocations.Remove(coin);
        }
        else
        {
            var potion = PotionLocations.FirstOrDefault(p => p.X == PlayerLocation.X && p.Y == PlayerLocation.Y);

            if (!potion.IsEmpty)
            {
                Health += PotionValue;
                PotionLocations.Remove(potion);
            }
        }

        lightMap = FOV();
    }

    private void KeyDown(KeyboardEventArgs args)
    {
        //Console.WriteLine($"Key Pressed: [{args.Key}]");

        if (args.Key == "ArrowUp")
        {
            if (gameMap[PlayerLocation.X - 1, PlayerLocation.Y] != 1)
            {
                PlayerLocation.X -= 1;
                CheckThingsSincePlayerMoved();
            }
        }
        else if (args.Key == "ArrowDown")
        {
            if (gameMap[PlayerLocation.X + 1, PlayerLocation.Y] != 1)
            {
                PlayerLocation.X += 1;
                CheckThingsSincePlayerMoved();
            }
        }
        else if (args.Key == "ArrowLeft")
        {
            if (gameMap[PlayerLocation.X, PlayerLocation.Y - 1] != 1)
            {
                PlayerLocation.Y -= 1;
                CheckThingsSincePlayerMoved();
            }
        }
        else if (args.Key == "ArrowRight")
        {
            if (gameMap[PlayerLocation.X, PlayerLocation.Y + 1] != 1)
            {
                PlayerLocation.Y += 1;
                CheckThingsSincePlayerMoved();
            }
        }
    }

    // Taken from http://www.roguebasin.com/index.php?title=Eligloscode
    // Modified to fit in my game
    private int[,] FOV()
    {
        float x,y;
        int i;

        int [,] map = new int[GAME_FIELD_HEIGHT, GAME_FIELD_WIDTH]
        {
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }
        };

        for(i=0;i<360;i++)
        {
            x = (float) Math.Cos(i*0.01745f);
            y = (float) Math.Sin(i*0.01745f);
            DoFov(x,y, map);
        };

        return map;
    }

    private void DoFov(float x,float y, int[,] map)
    {
        int i;
        float ox,oy;
        ox = (float) PlayerLocation.X+0.5f;
        oy = (float) PlayerLocation.Y+0.5f;

        for(i=0;i<360;i++)
        {
            map[(int)ox,(int)oy]=2;
            if(gameMap[(int)ox,(int)oy]==1) // if tile is a wall
               return;
            ox+=x;
            oy+=y;
        };
    }
}
