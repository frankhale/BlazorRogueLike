@page "/"

@using System
@using System.Drawing
@using System.Timers
@using GoRogue.MapGeneration
@using GoRogue.MapViews
@using Troschuetz.Random.Generators
@inject IJSRuntime JSRuntime

<div tabindex="0" class="container-fluid game-field" @onkeydown=KeyDown @ref="gameFieldDiv">
    <div class="row justify-content-center game-info">
        <!--<div>X: @PlayerLocation.X | Y: @PlayerLocation.Y | W: @GoldenCandle.Location.X | @GoldenCandle.Location.Y |  </div>-->
        <div>Health: @PlayerHealth</div>        
        <div>&nbsp;|&nbsp;Score: @PlayerScore</div>
        <div>&nbsp;|&nbsp;Enemies Killed: @PlayerEnemiesKilled</div>
        @if(PlayerCombatInfo != string.Empty)
        {
            <div>&nbsp;|&nbsp;@PlayerCombatInfo</div>
        }    
        @if(EnemyStats != string.Empty)
        {            
            <div>&nbsp;|&nbsp;</div>
            <div class="enemy-stats">Enemy [ @EnemyStats ]</div>
        }        
    </div>
    @if(WinLoseMessage == string.Empty)
    {
        @for (int y = ViewPort.Y; y < ViewPort.Height; y++)
        {
            <div class="row justify-content-center">
                @for (int x = ViewPort.X; x < ViewPort.Width; x++)
                {
                    if (PlayerLocation.X == x && PlayerLocation.Y == y)
                    {
                        <span class="player"></span>
                        continue;
                    }

                    <span class=@(GetTileClassName(x, y))></span>
                }
            </div>
        }
    }
    else
    {
        <div class="row justify-content-center ded-info">@WinLoseMessage</div>
    }
</div>

@code
{
    private enum Movement
    {
        LEFT,
        RIGHT,
        UP,
        DOWN
    }

    private enum EntityType
    {
        Enemy,
        Pickup
    }

    private enum EnemyType
    {
        Spider = 0,
        Lurcher = 1,
        Crab = 2
    }

    private enum WhoAmI
    {
        Player,
        Enemy
    }

    private class TileWalkableInfo
    {
        public bool Walkable { get; set; }
        public Point Location { get;set; }
        public Entity Entity { get; set; }
    }

    private abstract class Component { }    

    private class StatComponent : Component {
        public int Health { get; set; }
        public int Attack { get; set; }        
    }

    private class Entity
    {
        public Point Location { get; set; }
        public EntityType EntityType { get; set; }
        public List<Component> Components { get; set; }
        public int Id { get; set; }
    }

    private string WinLoseMessage { get; set; } = string.Empty;
    private string EnemyStats { get; set; } = string.Empty;
    private string PlayerCombatInfo { get; set; } = string.Empty;
    private Point PlayerLocation;
    private int PlayerHealth = 30;
    private int PlayerScore = 0;
    private int PlayerAttack = 1;
    private int PlayerEnemiesKilled = 0;    
    private const int CoinValue = 50;
    private const int PotionValue = 25;
    private int TotalNumberOfCoins = 150;
    private int TotalNumberOfPotions = 50;
    private int TotalNumberOfEnemies = 50;
    private Random random = new Random();
    private List<Entity> CoinLocations = new List<Entity>();
    private List<Entity> PotionLocations = new List<Entity>();
    private List<Entity> EnemyLocations = new List<Entity>();    
    private List<Entity> TreasureChestLocations = new List<Entity>();
    private Entity GoldenCandle;
    private ElementReference gameFieldDiv;    
    private int ViewPortHeight = 12;
    private int ViewPortWidth = 25;
    private Rectangle ViewPort;
    private const int WIDTH = 150;
    private const int HEIGHT = 150;
    private int[,] gameMap = new int[HEIGHT, WIDTH];
    private int[,] lightMap = new int[HEIGHT, WIDTH];
    
    private void UpdatePlayerViewPortPoints(Point PlayerLocation)
    {
        int viewPortX = PlayerLocation.X - ViewPortWidth;
        int viewPortY = PlayerLocation.Y - ViewPortHeight;

        if (viewPortX < 0) viewPortX = Math.Max(0, viewPortX);
        if (viewPortX > (WIDTH - (ViewPortWidth * 2))) viewPortX = (WIDTH - (ViewPortWidth * 2));

        if (viewPortY < 0) viewPortY = Math.Max(0, viewPortY);
        if (viewPortY > (HEIGHT - (ViewPortHeight * 2))) viewPortY = (HEIGHT - (ViewPortHeight * 2));

        int viewPortWidth = viewPortX + (ViewPortWidth * 2);
        int viewPortHeight = viewPortY + (ViewPortHeight * 2);

        ViewPort = new Rectangle(viewPortX, viewPortY, viewPortWidth, viewPortHeight);

        lightMap = RB_FOV();
    }

    protected override void OnInitialized()
    {
        gameMap = GenerateMapWithRectangularRooms(WIDTH, HEIGHT, 35, 4, 15);
    
        UpdatePlayerViewPortPoints(PlayerLocation);

        SpawnCoins();
        SpawnPotions();
        SpawnEnemies();
        SpawnGoldenCandle();

        var timer = new Timer(1000);
        timer.Elapsed += new ElapsedEventHandler(GameLoop);
        timer.Enabled = true;
    }

    private int[,] GenerateMapWithRectangularRooms(int width, int height, int maxRooms, int roomMinSize, int roomMaxSize)
    {
        var map = new ArrayMap<bool>(width, height);
        QuickGenerators.GenerateRandomRoomsMap(map, new StandardGenerator(), maxRooms, roomMinSize, roomMaxSize, 5);

        var result = new int[height, width];

        for (int y = 0; y < map.Height; y++)
        {
            for (int x = 0; x < map.Width; x++)
            {
                if (map[x, y])
                {
                    result[y, x] = 2;

                    if(PlayerLocation.IsEmpty)
                    {
                        PlayerLocation = new Point(x, y);
                    }
                }
                else
                {
                    result[y, x] = 1;
                }
            }
        }

        return result;
    }

    private Point GenerateRandomPoint(bool randomHighLocation = false)
    {
        int h = 0;
        int w = 0;

        do
        {
            h = random.Next(0, HEIGHT - 1);
            w = random.Next(0, WIDTH - 1);
        }
        // We are only checking to see if the tile is a wall and now if we
        // already placed some other object. FIX ME LATER!
        while (gameMap[h, w] == 1 ||
            CoinLocations.Any(z => z.Location.X == w && z.Location.Y == h) ||
            PotionLocations.Any(z => z.Location.X == w && z.Location.Y == h) ||
            TreasureChestLocations.Any(z => z.Location.X == w && z.Location.Y == h) ||
            EnemyLocations.Any(z => z.Location.X == w && z.Location.Y == h) ||
            (PlayerLocation.X == w && PlayerLocation.Y == h));

        return new Point(w, h);
    }

    private void SpawnPotions()
    {
        if (PotionLocations.Count() == 0)
        {
            for (int i = 0; i < TotalNumberOfPotions; i++)
            {
                PotionLocations.Add( 
                    new Entity
                    {
                        Location = GenerateRandomPoint(),
                        EntityType = EntityType.Pickup,
                        Id = 10
                    }
                );
            }
        }
    }

    private void SpawnCoins()
    {
        if (CoinLocations.Count() == 0)
        {
            for (int i = 0; i < TotalNumberOfCoins; i++)
            {
                CoinLocations.Add(
                    new Entity
                    {
                        Location = GenerateRandomPoint(),
                        EntityType = EntityType.Pickup,
                        Id = 11
                    }
                );
            }
        }
    }

    private void SpawnEnemies()
    {
        if (EnemyLocations.Count() == 0)
        {
            for (int i = 0; i < TotalNumberOfEnemies; i++)
            {
                int id = random.Next(0, 3);
                var enemyType = Enum.Parse(typeof(EnemyType), id.ToString());
                var statComponent = enemyType switch {
                    EnemyType.Spider => new StatComponent { Health = 2, Attack = 1},
                    EnemyType.Crab => new StatComponent { Health = 10, Attack = 2},
                    EnemyType.Lurcher => new StatComponent { Health = 10, Attack = 3},
                    _ => null
                };

                EnemyLocations.Add(
                    new Entity
                    {
                        Location = GenerateRandomPoint(),
                        EntityType = EntityType.Enemy,
                        Components = new List<Component>
                        {
                            statComponent
                        },
                        Id = id
                    }
                );
            }
        }
    }

    private void SpawnGoldenCandle()
    {
        GoldenCandle = new Entity
        {
            Location = GenerateRandomPoint(true),
            EntityType = EntityType.Pickup,            
            Id = 100
        };
    }

    private void GameLoop(object source, ElapsedEventArgs e)
    {
        // TODO: Do some game updates here...
    }

    private int[,] InitializeMap()
    {
        int[,] map = new int[HEIGHT, WIDTH];

        for (int height = 0; height < HEIGHT; height++)
            for (int width = 0; width < WIDTH; width++)
            {
                map[height, width] = 0;
            }

        return map;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("SetFocusToElement", gameFieldDiv);
        }
    }

    private void MoveEnemies()
    {    
        foreach(var enemy in EnemyLocations)
        {
            var direction = random.Next(0,4);
            Point loc = new Point(enemy.Location.X, enemy.Location.Y);

            if(direction == 0 && IsTileWalkable(enemy.Location.X, enemy.Location.Y, Movement.UP, WhoAmI.Enemy))
            {                
                loc.Y -= 1;
            }
            else if(direction == 1 && IsTileWalkable(enemy.Location.X, enemy.Location.Y, Movement.DOWN, WhoAmI.Enemy)) 
            {
                loc.Y += 1;
            }
            else if(direction == 2 && IsTileWalkable(enemy.Location.X, enemy.Location.Y, Movement.LEFT, WhoAmI.Enemy)) 
            {
                loc.X -= 1;
            }
            else if(direction == 3 && IsTileWalkable(enemy.Location.X, enemy.Location.Y, Movement.RIGHT, WhoAmI.Enemy)) 
            {
                loc.X += 1;
            }

            enemy.Location = loc;
        }
    }

    private void UpdateAfterPlayerMoved()
    {
        var coin = CoinLocations.FirstOrDefault(c => c.Location.X == PlayerLocation.X && c.Location.Y == PlayerLocation.Y);
        var potion = PotionLocations.FirstOrDefault(p => p.Location.X == PlayerLocation.X && p.Location.Y == PlayerLocation.Y);
        var treasureChest = TreasureChestLocations.FirstOrDefault(t => t.Location.X == PlayerLocation.X && t.Location.Y == PlayerLocation.Y);
        var goldenCandle = GoldenCandle.Location.X == PlayerLocation.X && GoldenCandle.Location.Y == PlayerLocation.Y;

        if (coin != null)
        {
            PlayerScore += CoinValue;
            CoinLocations.Remove(coin);
        } 
        else if (potion != null)
        {
            PlayerHealth += PotionValue;
            PotionLocations.Remove(potion);
        } 
        else if (treasureChest != null)
        {
            var healthRecoveryChance = random.Next(0, 100) <= 20;
            var extraScoreChange = random.Next(0, 100) <= 15;

            if(healthRecoveryChance) 
            {
                PlayerHealth += 5;
            }
                        
            if(extraScoreChange)
            {
                PlayerScore += 25;
            }

            PlayerScore += 10;

            TreasureChestLocations.Remove(treasureChest);
        }
        else if (goldenCandle)
        {
            PlayerScore += 10000;
            WinLoseMessage = "YOU WIN SON!!!";
        }

        MoveEnemies();
        
        lightMap = RB_FOV();
    }

    private bool IsTileWalkable(int x, int y, Movement? movementDirection, WhoAmI whoAmI)
    {
        if(movementDirection == null) return false;

        var isPlayer = PlayerLocation.X == x && PlayerLocation.Y == y;

        Func<int, int, bool> tileIsPlayerTile = (int _x, int _y) => 
        {
            return ((movementDirection == Movement.UP && PlayerLocation.Y == _y - 1 && PlayerLocation.X == _x) ||
                    (movementDirection == Movement.DOWN && PlayerLocation.Y == _y + 1 && PlayerLocation.X == _x) ||
                    (movementDirection == Movement.LEFT && PlayerLocation.Y == _y && PlayerLocation.X == _x - 1) ||
                    (movementDirection == Movement.RIGHT && PlayerLocation.Y == _y && PlayerLocation.X == _x + 1));
        };

        Func<int, int, int, bool> tileGameMapTraversable = (int _x, int _y, int tId) => 
        {
            return !(
               (movementDirection == Movement.UP && gameMap[_y - 1, _x] == tId) ||
               (movementDirection == Movement.DOWN && gameMap[_y + 1, _x] == tId) ||
               (movementDirection == Movement.LEFT && gameMap[_y, _x - 1] == tId) ||
               (movementDirection == Movement.RIGHT && gameMap[_y, _x + 1] == tId)
            );
        };
        
        Func<int, int, List<Entity>, WhoAmI, TileWalkableInfo> entityLocationTraversable = (int _x, int _y, List<Entity> locations, WhoAmI whoAmI) => 
        {
            var e =  locations.FirstOrDefault(l => (movementDirection == Movement.UP && l.Location.Y == _y - 1 && l.Location.X == _x) ||
                                      (movementDirection == Movement.DOWN && l.Location.Y == _y + 1 && l.Location.X == _x) ||
                                      (movementDirection == Movement.LEFT && l.Location.Y == _y && l.Location.X == _x - 1) ||
                                      (movementDirection == Movement.RIGHT && l.Location.Y == _y && l.Location.X == _x + 1));

            if(e != null && (e.EntityType == EntityType.Enemy || whoAmI == WhoAmI.Enemy))
            {
                return new TileWalkableInfo
                {
                    Walkable = false,
                    Location = e.Location,
                    Entity = e
                };
            }

            return new TileWalkableInfo
            {
                Walkable = true,
                Location = new Point(_x, _y)                
            }; 
        };

        if(tileIsPlayerTile(x, y)) return false;

        // we are going to initiate an attack sequence here if the location is an enemy
        // we want to refactor this so that we have more information about tiles when we
        // want to attempt to walk onto them
        var enemy = entityLocationTraversable(x, y, EnemyLocations, whoAmI);

        if(!enemy.Walkable && isPlayer)
        {
            InitiateAttackSequence(enemy.Location.X, enemy.Location.Y);
        }
        else
        {
            if (EnemyStats != string.Empty)
            {
                EnemyStats = string.Empty;
            }

            if(PlayerCombatInfo != string.Empty)
            {
                PlayerCombatInfo = string.Empty;
            }
        }
        
        return tileGameMapTraversable(x, y, 1 /* Wall */) &&
               entityLocationTraversable(x, y, CoinLocations, whoAmI).Walkable &&
               entityLocationTraversable(x, y, PotionLocations, whoAmI).Walkable &&
               entityLocationTraversable(x, y, TreasureChestLocations, whoAmI).Walkable &&
               enemy.Walkable;
    }

    private Movement? GetMovementDirection(KeyboardEventArgs args)
    {
        return args.Key switch
        {
            "ArrowUp" => Movement.UP,
            "ArrowDown" => Movement.DOWN,
            "ArrowLeft" => Movement.LEFT,
            "ArrowRight" => Movement.RIGHT,
            _ => null        
        };
    }

    private void InitiateAttackSequence(int x, int y) 
    { 
        var enemy = EnemyLocations.FirstOrDefault(e => e.Location.X == x && e.Location.Y == y);

        if(enemy != null)
        {
            var enemyStatsComponent = (StatComponent) enemy.Components.FirstOrDefault(e => e.GetType() == typeof(StatComponent));

            if(enemyStatsComponent != null)
            {
                EnemyStats = $"Health: {enemyStatsComponent.Health} | Attack: {enemyStatsComponent.Attack}";                

                var playerCriticalStrike = random.Next(0, 100) <= 20;
                var enemyCriticalStrike = random.Next(0, 100) <= 20; 

                if(playerCriticalStrike) {
                    var damage = PlayerAttack + 2 * 2;
                    enemyStatsComponent.Health -= damage;

                    PlayerCombatInfo = $"CRITICAL STRIKE for {damage} damage!!!";
                    EnemyStats = $"Health: {enemyStatsComponent.Health} | Attack: {enemyStatsComponent.Attack}";
                }
                else
                {                                         
                    enemyStatsComponent.Health -= PlayerAttack;
                    PlayerCombatInfo = $"attack for {PlayerAttack} damage";
                    EnemyStats = $"Health: {enemyStatsComponent.Health} | Attack: {enemyStatsComponent.Attack}";
                }

                if(enemyCriticalStrike) {
                    var damage = enemyStatsComponent.Attack + 2 * 2;
                    PlayerHealth -= damage;
                    EnemyStats = $"CRITICAL STRIKE for {damage} damage!!!";
                }
                else
                {
                    var damage = 
                    PlayerHealth -= enemyStatsComponent.Attack;
                    EnemyStats = $"attack for {enemyStatsComponent.Attack} damage";
                }

                if(enemyStatsComponent.Health <= 0) 
                {                    
                    EnemyStats = "Ded!!!";
                    PlayerEnemiesKilled += 1;

                    var treasureChestLocation = new Point(enemy.Location.X, enemy.Location.Y);
                    
                    EnemyLocations.Remove(enemy);
                    TreasureChestLocations.Add(new Entity
                    {
                        Id = 20,
                        Location = treasureChestLocation,
                        EntityType = EntityType.Pickup,
                    });
                }

                if(PlayerHealth <= 0)
                {                    
                    PlayerHealth = 0;
                    WinLoseMessage = "You ded son!";             
                }
            }            
        }        
    }

    private void KeyDown(KeyboardEventArgs args)
    {
        var movementDirection = GetMovementDirection(args);

        if(!IsTileWalkable(PlayerLocation.X, PlayerLocation.Y, movementDirection, WhoAmI.Player)) return;
        
        if (movementDirection == Movement.UP)
        {
            PlayerLocation.Y -= 1;
            UpdateAfterPlayerMoved();
            UpdatePlayerViewPortPoints(PlayerLocation);
        }
        else if (movementDirection == Movement.DOWN)
        {
            PlayerLocation.Y += 1;
            UpdateAfterPlayerMoved();
            UpdatePlayerViewPortPoints(PlayerLocation);
        }
        else if (movementDirection == Movement.LEFT)
        {
            PlayerLocation.X -= 1;
            UpdateAfterPlayerMoved();
            UpdatePlayerViewPortPoints(PlayerLocation);
        }
        else if (movementDirection == Movement.RIGHT)
        {
            PlayerLocation.X += 1;
            UpdateAfterPlayerMoved();
            UpdatePlayerViewPortPoints(PlayerLocation);
        }
    }
    private string GetTileClassName(int x, int y)
    {
        if (x >= WIDTH) x = WIDTH - 1;
        if (y >= HEIGHT) y = HEIGHT - 1;

        if (@lightMap[y, x] == 2)
        {
            if (CoinLocations.Any(c => c.Location.X == x && c.Location.Y == y))
            {
                return "coin";
            }

            if (PotionLocations.Any(p => p.Location.X == x && p.Location.Y == y))
            {
                return "potion";
            }

            if (TreasureChestLocations.Any(t => t.Location.X == x && t.Location.Y == y))
            {
                return "treasure-chest";
            }

            if(GoldenCandle.Location.X == x && GoldenCandle.Location.Y == y)
            {
                return "golden-candle";
            }

            var enemy = EnemyLocations.FirstOrDefault(e => e.Location.X == x && e.Location.Y == y);
            if (enemy != null)
            {
                if(enemy.Id == 0) return "spider";
                if(enemy.Id == 1) return "lurcher";
                if(enemy.Id == 2) return "crab";
            }

            if (gameMap[y, x] == 1)
            {
                return "wall";
            }
            else if (gameMap[y, x] == 2)
            {
                return "grass";
            }
        }

        return "hidden";
    }

    #region FOV FROM ROGUEBASIN
    // Taken from http://www.roguebasin.com/index.php?title=Eligloscode
    // Modified to fit in my game
    private int[,] RB_FOV()
    {
        float x, y;
        int i;

        int[,] map = InitializeMap();

        for (i = 0; i < 360; i++)
        {
            x = (float)Math.Cos(i * 0.01745f);
            y = (float)Math.Sin(i * 0.01745f);
            RB_DoFov(x, y, map);
        };

        return map;
    }

    // Taken from http://www.roguebasin.com/index.php?title=Eligloscode
    // Modified to fit in my game
    private void RB_DoFov(float x, float y, int[,] map)
    {
        int i;
        float ox, oy;
        ox = (float)PlayerLocation.X + 0.5f;
        oy = (float)PlayerLocation.Y + 0.5f;

        for (i = 0; i < 360; i++)
        {
            map[(int)oy, (int)ox] = 2;

            if (gameMap[(int)oy, (int)ox] == 1) // if tile is a wall
                return;

            ox += x;
            oy += y;
        };
    }
    #endregion
}
