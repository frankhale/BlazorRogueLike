@page "/"

@using System
@using System.Drawing
@using System.Timers
@using GoRogue.MapGeneration
@using GoRogue.MapViews
@using Troschuetz.Random.Generators
@inject IJSRuntime JSRuntime

<div tabindex="0" class="container-fluid game-field" @onkeydown=KeyDown @ref="gameFieldDiv">
    <div class="row justify-content-center game-info">
        <div>Health: @Health</div>
        &nbsp;|&nbsp;
        <div>Score: @Score</div>
    </div>
    @for (int y = ViewPort.Y; y < ViewPort.Height; y++)
    {
        <div class="row justify-content-center">
            @for (int x = ViewPort.X; x < ViewPort.Width; x++)
            {
                if (PlayerLocation.X == x && PlayerLocation.Y == y)
                {
                    <span class="player"></span>
                    continue;
                }

                <span class=@(GetTileClassName(x, y))></span>
            }
        </div>
    }
</div>

@code
{
    private enum Movement
    {
        LEFT,
        RIGHT,
        UP,
        DOWN
    }

    private int Health = 50;
    private int Score = 0;
    private const int CoinValue = 50;
    private const int PotionValue = 25;
    private int TotalNumberOfCoins = 150;
    private int TotalNumberOfPotions = 50;
    private int TotalNumberOfEnemies = 50;
    private Random random = new Random();
    private List<Point> CoinLocations = new List<Point>();
    private List<Point> PotionLocations = new List<Point>();
    private List<Point> EnemyLocations = new List<Point>();
    private ElementReference gameFieldDiv;
    private Point PlayerLocation;
    private int ViewPortHeight = 12;
    private int ViewPortWidth = 25;
    private Rectangle ViewPort;
    private const int WIDTH = 150;
    private const int HEIGHT = 150;
    private int[,] gameMap = new int[HEIGHT, WIDTH];
    private int[,] lightMap = new int[HEIGHT, WIDTH];

    private void UpdatePlayerViewPortPoints(Point PlayerLocation)
    {
        int viewPortX = PlayerLocation.X - ViewPortWidth;
        int viewPortY = PlayerLocation.Y - ViewPortHeight;

        if (viewPortX < 0) viewPortX = Math.Max(0, viewPortX);
        if (viewPortX > (WIDTH - (ViewPortWidth * 2))) viewPortX = (WIDTH - (ViewPortWidth * 2));

        if (viewPortY < 0) viewPortY = Math.Max(0, viewPortY);
        if (viewPortY > (HEIGHT - (ViewPortHeight * 2))) viewPortY = (HEIGHT - (ViewPortHeight * 2));

        int viewPortWidth = viewPortX + (ViewPortWidth * 2);
        int viewPortHeight = viewPortY + (ViewPortHeight * 2);

        ViewPort = new Rectangle(viewPortX, viewPortY, viewPortWidth, viewPortHeight);

        lightMap = RB_FOV();
    }

    protected override void OnInitialized()
    {
        gameMap = GenerateMapWithRectangularRooms(WIDTH, HEIGHT, 35, 4, 15);
    
        UpdatePlayerViewPortPoints(PlayerLocation);

        SpawnCoins();
        SpawnPotions();
        SpawnEnemies();

        var timer = new Timer(1000);
        timer.Elapsed += new ElapsedEventHandler(GameLoop);
        timer.Enabled = true;
    }

    private int[,] GenerateMapWithRectangularRooms(int width, int height, int maxRooms, int roomMinSize, int roomMaxSize)
    {
        var map = new ArrayMap<bool>(width, height);
        QuickGenerators.GenerateRandomRoomsMap(map, new StandardGenerator(), maxRooms, roomMinSize, roomMaxSize, 5);

        var result = new int[height, width];

        for (int y = 0; y < map.Height; y++)
        {
            for (int x = 0; x < map.Width; x++)
            {
                if (map[x, y])
                {
                    result[y, x] = 2;

                    if(PlayerLocation.IsEmpty)
                    {
                        PlayerLocation = new Point(x, y);
                    }
                }
                else
                {
                    result[y, x] = 1;
                }
            }
        }

        return result;
    }

    private Point GenerateRandomPoint()
    {
        int h = 0;
        int w = 0;

        do
        {
            h = random.Next(0, HEIGHT - 1);
            w = random.Next(0, WIDTH - 1);
        }
        // We are only checking to see if the tile is a wall and now if we
        // already placed some other object. FIX ME LATER!
        while (gameMap[h, w] == 1);

        return new Point(w, h);
    }

    private void SpawnPotions()
    {
        if (PotionLocations.Count() == 0)
        {
            for (int i = 0; i < TotalNumberOfPotions; i++)
            {
                PotionLocations.Add(GenerateRandomPoint());
            }
        }
    }

    private void SpawnCoins()
    {
        if (CoinLocations.Count() == 0)
        {
            for (int i = 0; i < TotalNumberOfCoins; i++)
            {
                CoinLocations.Add(GenerateRandomPoint());
            }
        }
    }

    private void SpawnEnemies()
    {
        if (EnemyLocations.Count() == 0)
        {
            for (int i = 0; i < TotalNumberOfEnemies; i++)
            {
                EnemyLocations.Add(GenerateRandomPoint());
            }
        }
    }

    private void GameLoop(object source, ElapsedEventArgs e)
    {
        // TODO: Do some game updates here...
    }

    private int[,] InitializeMap()
    {
        int[,] map = new int[HEIGHT, WIDTH];

        for (int height = 0; height < HEIGHT; height++)
            for (int width = 0; width < WIDTH; width++)
            {
                map[height, width] = 0;
            }

        return map;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("SetFocusToElement", gameFieldDiv);
        }
    }

    private void UpdateAfterPlayerMoved()
    {
        var coin = CoinLocations.FirstOrDefault(p => p.X == PlayerLocation.X && p.Y == PlayerLocation.Y);

        if (!coin.IsEmpty)
        {
            Score += CoinValue;
            CoinLocations.Remove(coin);
        }
        else
        {
            var potion = PotionLocations.FirstOrDefault(p => p.X == PlayerLocation.X && p.Y == PlayerLocation.Y);

            if (!potion.IsEmpty)
            {
                Health += PotionValue;
                PotionLocations.Remove(potion);
            }
        }

        lightMap = RB_FOV();
    }

    private bool IsTileWalkable(int x, int y, Movement? movementDirection)
    {
        if(movementDirection == null) return false;

        Func<int, int, int, bool> tileGameMapTraversable = (int _x, int _y, int tId) => 
        {
            return (
               (movementDirection == Movement.UP && gameMap[_y - 1, _x] == tId) ||
               (movementDirection == Movement.DOWN && gameMap[_y + 1, _x] == tId) ||
               (movementDirection == Movement.LEFT && gameMap[_y, _x - 1] == tId) ||
               (movementDirection == Movement.RIGHT && gameMap[_y, _x + 1] == tId)
            );
        };
        
        Func<int, int, List<Point>, bool> entityLocationTraversable = (int _x, int _y, List<Point> locations) => 
        {
            return locations.Any(l => (movementDirection == Movement.UP && l.Y == _y - 1 && l.X == _x) ||
                                      (movementDirection == Movement.DOWN && l.Y == _y + 1 && l.X == _x) ||
                                      (movementDirection == Movement.LEFT && l.Y == _y && l.X == _x - 1) ||
                                      (movementDirection == Movement.RIGHT && l.Y == _y && l.X == _x + 1));
        };

        return !tileGameMapTraversable(PlayerLocation.X, PlayerLocation.Y, 1) &&
               !entityLocationTraversable(x, y, EnemyLocations);
    }

    private Movement? GetMovementDirection(KeyboardEventArgs args)
    {
        return args.Key switch
        {
            "ArrowUp" => Movement.UP,
            "ArrowDown" => Movement.DOWN,
            "ArrowLeft" => Movement.LEFT,
            "ArrowRight" => Movement.RIGHT,
            _ => null        
        };
    }

    private void KeyDown(KeyboardEventArgs args)
    {
        var movementDirection = GetMovementDirection(args);

        if(!IsTileWalkable(PlayerLocation.Y, PlayerLocation.X, movementDirection)) return;
        
        if (movementDirection == Movement.UP)
        {
            PlayerLocation.Y -= 1;
            UpdateAfterPlayerMoved();
            UpdatePlayerViewPortPoints(PlayerLocation);
        }
        else if (movementDirection == Movement.DOWN)
        {
            PlayerLocation.Y += 1;
            UpdateAfterPlayerMoved();
            UpdatePlayerViewPortPoints(PlayerLocation);
        }
        else if (movementDirection == Movement.LEFT)
        {
            PlayerLocation.X -= 1;
            UpdateAfterPlayerMoved();
            UpdatePlayerViewPortPoints(PlayerLocation);
        }
        else if (movementDirection == Movement.RIGHT)
        {
            PlayerLocation.X += 1;
            UpdateAfterPlayerMoved();
            UpdatePlayerViewPortPoints(PlayerLocation);
        }
    }
    private string GetTileClassName(int x, int y)
    {
        if (x >= WIDTH) x = WIDTH - 1;
        if (y >= HEIGHT) y = HEIGHT - 1;

        if (@lightMap[y, x] == 2)
        {
            if (CoinLocations.Any(c => c.X == x && c.Y == y))
            {
                return "coin";
            }

            if (PotionLocations.Any(p => p.X == x && p.Y == y))
            {
                return "potion";
            }

            /*if (EnemyLocations.Any(e => e.X == x && e.Y == y))
            {
                var eId = random.Next(0,3);

                if(eId == 0) return "spider";
                if(eId == 1) return "lurcher";
                if(eId == 2) return "crab";
            }*/

            if (gameMap[y, x] == 1)
            {
                return "wall";
            }
            else if (gameMap[y, x] == 2)
            {
                return "grass";
            }
        }

        return "hidden";
    }

    #region FOV FROM ROGUEBASIN
    // Taken from http://www.roguebasin.com/index.php?title=Eligloscode
    // Modified to fit in my game
    private int[,] RB_FOV()
    {
        float x, y;
        int i;

        int[,] map = InitializeMap();

        for (i = 0; i < 360; i++)
        {
            x = (float)Math.Cos(i * 0.01745f);
            y = (float)Math.Sin(i * 0.01745f);
            RB_DoFov(x, y, map);
        };

        return map;
    }

    // Taken from http://www.roguebasin.com/index.php?title=Eligloscode
    // Modified to fit in my game
    private void RB_DoFov(float x, float y, int[,] map)
    {
        int i;
        float ox, oy;
        ox = (float)PlayerLocation.X + 0.5f;
        oy = (float)PlayerLocation.Y + 0.5f;

        for (i = 0; i < 360; i++)
        {
            map[(int)oy, (int)ox] = 2;

            if (gameMap[(int)oy, (int)ox] == 1) // if tile is a wall
                return;

            ox += x;
            oy += y;
        };
    }
    #endregion
}
